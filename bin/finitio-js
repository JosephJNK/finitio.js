#!/usr/bin/env coffee
require('coffee-script')
Finitio = require('../src/finitio')
fs = require('fs')
program = require('commander');

program
  .version('0.0.1')
  .usage('[options] SCHEMA.fio [DATA.json]')
  .option('-c, --compile', 'Compile the input schema')
  .option('-v, --validate', 'Valid input data against the schema')
  .option('-f, --fast', 'Stop on first validation error')
  .option('--stack', 'Show stack trace on error')
  .parse(process.argv)

# Returns the sourceUrl
sourceUrl = ()->
  return "file://" + program.args[0];

# Loads the schema argument and returns its the source
schemaSource = ()->
  schemaFile = program.args[0]
  schemaSource = fs.readFileSync(schemaFile).toString()

world = ()->
  { sourceUrl: sourceUrl(), failfast: program.fast }

# Loads the schema argument and returns the compiled system
schema = ()->
  Finitio.dress(schemaSource(), world())

# Loads the data arguments and returns it as a data object
data = ()->
  dataFile = program.args[1]
  dataSource = fs.readFileSync(dataFile).toString()
  JSON.parse(dataSource)

# Error management

strategies = []
errorManager = (e)->
  for s in strategies
    if s[0](e)
      s[1](e)
      break

strategies.push([
  (e)->
    e instanceof Finitio.TypeError
  (e)->
    if program.stack
      console.log(e.debugTree())
    else
      for c in e.rootCauses
        console.log("[#{c.location}] #{c.message}")
])

strategies.push([
  (e)->
    e.name == 'SyntaxError'
  (e)->
    console.log("[#{e.line}:#{e.column}] #{e.message}")
    console.log(e.expected) if program.stack
])

strategies.push([
  (e)->
    true
  (e)->
    console.log(e.message)
    console.log(e.stack) if program.stack
])

# Actions

actions = {}

# Compiles the schema and outputs it on standard output
actions.compile = ()->
  console.log Finitio.compile(schemaSource(), world())

# Validate input data using the schema
actions.validate = ()->
  console.log(schema().dress(data(), world()))

try
  if program.compile
    action = actions.compile
  else if program.validate
    action = actions.validate
  action()
catch e
  errorManager(e)
